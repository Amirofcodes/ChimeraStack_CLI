name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches: [main, master]
    tags:
      - "v*"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for setuptools-scm to detect version

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install package in development mode
        run: pip install -e .

      - name: Run tests
        run: pytest -m "not integration" -v

  build-and-publish:
    name: Build and publish packages
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for setuptools-scm to detect version

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Check if this is a tag release
        id: check-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to PyPI
        if: steps.check-tag.outputs.is_tag == 'true'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*

  build-executables:
    name: Build platform executables
    needs: test
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            script: ./build_executables.sh
            artifact: chimera-stack-cli-macos
          - os: ubuntu-latest
            script: ./build_linux_executable.sh
            artifact: chimera-stack-cli-linux

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for setuptools-scm to detect version

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller setuptools-scm

      - name: Build executable
        run: |
          chmod +x ${{ matrix.script }}
          ${{ matrix.script }}

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: releases/${{ matrix.artifact }}

      - name: Generate checksums
        run: |
          cd releases
          sha256sum ${{ matrix.artifact }} > ${{ matrix.artifact }}.sha256

  create-release:
    name: Create GitHub Release
    needs: [build-and-publish, build-executables]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            artifacts/chimera-stack-cli-macos/chimera-stack-cli-macos
            artifacts/chimera-stack-cli-linux/chimera-stack-cli-linux
            artifacts/python-package-distributions/*
          generate_release_notes: true

  docker-build:
    name: Build and push Docker image
    needs: [test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for setuptools-scm to detect version

      - name: Extract tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.build
          push: true
          tags: |
            ghcr.io/chimera/cli:${{ steps.tag.outputs.tag }}
            ghcr.io/chimera/cli:latest

      - name: Check Docker image
        run: |
          docker pull ghcr.io/chimera/cli:${{ steps.tag.outputs.tag }}
          docker run --rm ghcr.io/chimera/cli:${{ steps.tag.outputs.tag }} --version
